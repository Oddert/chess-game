socket.on('accept-request', payload => {
  console.log('NEW ROUTE, User wants to accept a request:')
  console.log('User: ', socket.request.user)
  console.log({ payload })
  if (!socket.request.isAuthenticated()) {
    socket.emit('accept-request', { err: { message: 'You are not signed in, please log in again' } })
  } else {
    const defaultGame = request => ({
      request: request._id,
      board: createDefaultBoard(),
      white: {
        id: request.author.id,
        username: request.author.username,
        score: 0
      },
      black: {
        id: socket.request.user._id,
        username: socket.request.user.username,
        score: 0
      }
    })

    const notificationBody = request => ({
      name: 'Request Accepted',
      message: `${request.target.username} accepted your request for a game, click to play against them!`,
      notification_type: 'accept-request',
      user: {
        username: request.author.username,
        id: request.author._id
      },
      other_users: [{
        username: request.target.username,
        id: request.target._id
      }],
      game: request.game,
      request: request._id
    })

    // Find the request to use IDs in game creation
    Request.findById(payload)
    .then(request => {
      return Game.create(defaultGame(request)) // Create the new Game
    })
    .then(game => {
      console.log('...game created')
      // Update the request to say 'complete'
      return Request.findByIdAndUpdate(payload, {
        game: game._id,
        accepted: true,
        accepted_date: Date.now()
      })
    })
    .then(request => {
      console.log('...request created, updating author', { request })
      // Update the Author (user who created the request) to have the new game
      return User.findByIdAndUpdate(request.author.id, { $push: { activeGames: request.game } })
      .then(author => {
        console.log(`Author updated, returning request (2nd level)`, { author, request })
        // return the request again for next opperation
        return request
      })
    })
    .then(request => {
      console.log('ohh laawwwwd this is uncharted territory', { game })
      // Update the Recipient (target of request)
      return User.findByIdAndUpdate(request.target.id, { $push: { activeGames: request.game } })
      .then(recipient => {
        console.log(`Recipient updated, returning game (2nd level)`, { recipient })
        return request
      })
    })
    .then(request => {
      let newNotification = notificationBody(request)
      console.log('Going to create a notification from this: ', { newNotification })
      return Notification.create(newNotification)
    })
    .then(notification => {
      return User.findByIdAndUpdate(request.author.id, { $push: { notifications: notification._id } })
      .then(author => {
        socket.broadcast.to(author._id).emit('notification', notification)
        return notification
      })
    })
    .then(author => {
      console.log(`Author ${author.username} updated with notification`)
      socket.emit('accept-request', {
        success: true,
        game
      })
      socket.broadcast.to(author._id).emit('dev', {
        dev_type: 'accept-request',
        success: true,
        game
      })
    }).catch(err => testSocketError(err, socket, 'accept-request', err.message))
  }
})





// socket.on('accept-request', payload => {
//   console.log('User wants to accept a request:')
//   console.log(socket.request.user)
//   console.log(payload)
//   if (!socket.request.isAuthenticated()) {
//     socket.emit('accept-request', { err: 'You are not singed in, please log in again.' })
//   } else {
//     Request.findById(payload)
//     .then(request => {
//       console.log('# Found Request')
//       User.findById(socket.request.user._id)
//       .then(recipient => {
//         console.log('# Found Recipient')
//         User.findById(request.author.id)
//         .then(author => {
//           console.log('# Found Author')
//           Game.create({
//             request: request._id,
//             board: createDefaultBoard(),
//             white: {
//               id: request.author.id,
//               username: request.author.username,
//               score: 0
//             },
//             black: {
//               id: socket.request.user._id,
//               username: socket.request.user.username,
//               score: 0
//             }
//           })
//           .then(game => {
//             console.log('Game Created!')
//
//             author.activeGames.push(game._id)
//             recipient.activeGames.push(game._id)
//             request.game = game._id
//             request.accepted = true
//             request.accepted_date = Date.now()
//
//             author.save()
//             recipient.save()
//             request.save()
//             .then(saved_request => {
//               console.log('# request saved, creating notification...')
//               Notification.create({
//                 name: 'Request Accepted',
//                 message: `${recipient.username} accepted your request for a game, click to play against them!`,
//                 notification_type: 'accept-request',
//                 user: {
//                   username: author.username,
//                   id: author._id
//                 },
//                 other_users: [{
//                   username: recipient.username,
//                   id: recipient._id
//                 }],
//                 game: game._id,
//                 request: request._id
//               })
//               .then(notification => {
//                 console.log({ notification })
//                 console.log('saving to author')
//                 author.notifications.push(notification._id)
//                 author.save()
//                 .then(err => {
//                   console.log(`broadcasting to author id: ${author._id}`)
//                   socket.broadcast.to(author._id).emit('notification', notification)
//                 }).catch(err => testSocketError(err, socket, 'accept-request', err.message))
//               }).catch(err => testSocketError(err, socket, 'accept-request', err.message))
//               socket.emit('accept-request', {
//                 success: true,
//                 game
//               })
//               socket.broadcast.to(author._id).emit('dev', {
//                 dev_type: 'accept-request',
//                 success: true,
//                 game
//               })
//             }).catch(err => testSocketError(err, socket, 'accept-request', err.message))
//           }).catch(err => testSocketError(err, socket, 'accept-request', err.message))
//         }).catch(err => testSocketError(err, socket, 'accept-request', err.message))
//       }).catch(err => testSocketError(err, socket, 'accept-request', err.message))
//     }).catch(err => testSocketError(err, socket, 'accept-request', err.message))
//   }
//
// })
